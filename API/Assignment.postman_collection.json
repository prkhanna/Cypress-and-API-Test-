{
	"info": {
		"_postman_id": "8cf12027-1991-4848-afb4-f8bff5b5863b",
		"name": "Assignment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9136991"
	},
	"item": [
		{
			"name": "TokenGeneration",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData= pm.response.json()\r",
							"var v =jsonData.token\r",
							"pm.globals.set('authToken',v);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userName\": \"Gerimedica\",\r\n  \"password\": \"Auto@123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://demoqa.com/Account/v1/GenerateToken",
					"protocol": "https",
					"host": [
						"demoqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"GenerateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "UserCreation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var password = [\"Auto@123\",\"\"]\r",
							"pm.variables.set(\"password\",password[_.random(password.length-1)])\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var errorResponseSchema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"var responseSchema= {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"userID\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"username\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"books\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {}\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"userID\",\r",
							"    \"username\",\r",
							"    \"books\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var actualResponse = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test('Validate the schema response for user account', function () {\r",
							"    if( pm.response.code == \"201\"){\r",
							"    pm.expect(tv4.validate(responseSchema, actualResponse)).to.be.true;\r",
							"     }else{ pm.expect(tv4.validate(errorResponseSchema, actualResponse)).to.be.true;\r",
							"     }\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userName\": \"{{$randomFirstName}}\",\r\n   \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://demoqa.com/Account/v1/User",
					"protocol": "https",
					"host": [
						"demoqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"User"
					]
				}
			},
			"response": []
		},
		{
			"name": "BookAddition",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var userId = [\"05ada9e2-6446-4a0d-bee1-5382a2a6a885\",\"\"]\r",
							"pm.variables.set(\"userId\",userId[_.random(userId.length-1)])"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseSchema ={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"books\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"isbn\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"isbn\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"books\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"var errorResponseSchema400={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"}\r",
							"var errorResponseSchema401 = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"}\r",
							"var actualResponse= pm.response.json();\r",
							"\r",
							"pm.test('Validate the schema response for book addition', function () {\r",
							"    if( pm.response.code == \"400\"){\r",
							"    pm.expect(tv4.validate(errorResponseSchema400, actualResponse)).to.be.true;\r",
							"     }\r",
							"     else if ( pm.response.code == \"401\"){\r",
							"      pm.expect(tv4.validate(errorResponseSchema401, actualResponse)).to.be.true;\r",
							"     }else{\r",
							"  pm.expect(tv4.validate(responseSchema, actualResponse)).to.be.true;\r",
							"     }\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": \"{{userId}}\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"9781449365035\"\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://demoqa.com/BookStore/v1/Books",
					"protocol": "https",
					"host": [
						"demoqa",
						"com"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Book",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"var isbn = [\"9781449365035\",\"\"]\r",
							"pm.variables.set(\"isbn\",isbn[_.random(isbn.length-1)])"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var errorSchema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"\r",
							"\r",
							"pm.test('Validate the schema for delete request', function () {\r",
							"      if(pm.response.code == \"400\"){\r",
							"    var actualResponse= pm.response.json();\r",
							"    pm.expect(tv4.validate(errorSchema, actualResponse)).to.be.true;\r",
							"}else{\r",
							"    pm.response.to.have.status(\"No Content\");\r",
							"}\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"isbn\": \"{{isbn}}\",\r\n  \"userId\": \"05ada9e2-6446-4a0d-bee1-5382a2a6a885\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://demoqa.com/BookStore/v1/Book",
					"protocol": "https",
					"host": [
						"demoqa",
						"com"
					],
					"path": [
						"BookStore",
						"v1",
						"Book"
					]
				}
			},
			"response": []
		}
	]
}